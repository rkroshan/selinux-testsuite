#!/usr/bin/perl
use Test::More;

BEGIN {
    $basedir = $0;
    $basedir =~ s|(.*)/[^/]*|$1|;

    $test_count = 63;

    # Allow info to be shown.
    $v = $ARGV[0];
    if ($v) {
        if ( $v ne "-v" ) {
            plan skip_all => "Invalid option (use -v)";
        }
    }
    else {
        $v = " ";
    }

    # From kernel 5.5 support for fanotify(7) with filesystem { watch }
    $kvercur = `uname -r`;
    chomp($kvercur);
    $kverminstream = "5.5";

    $result = `$basedir/../kvercmp $kvercur $kverminstream`;
    if ( $result > 0 && -e "$basedir/fanotify_fs" ) {
        $test_watch = 1;
        $test_count += 4;
    }

    plan tests => $test_count;
}

# mount(2) MS_BIND | MS_PRIVATE requires an absolute path to a private mount
# point before MS_MOVE
$cwd = `pwd 2>/dev/null`;
chomp($cwd);
$private_path = "$cwd";
if ( $basedir eq "." ) {
    $private_path = "$cwd/mntpoint";
}
else {
    $private_path = "$cwd/$basedir/mntpoint";
}

# Set initial filesystem type
$fs_type = "ext4";

# For list of devices used
$device_count = 0;

sub get_loop_dev {
    print "Finding free /dev/loop entry\n";
    $dev = `losetup -f 2>/dev/null`;
    chomp($dev);
    if ( $dev eq "" ) {
        print "losetup failed to obtain /dev/loop entry\n";
        cleanup();
        exit -1;
    }

    # Keep list of devices for cleanup later
    if ( $device_count eq 0 ) {
        $device_list[$device_count] = $dev;
        $device_count += 1;
    }
    elsif ( $dev ne $device_list[ $device_count - 1 ] ) {
        $device_list[$device_count] = $dev;
        $device_count += 1;
    }
}

sub attach_dev {
    print "Attaching $basedir/fstest to $dev\n";
    $result = system("losetup $dev $basedir/fstest 2>/dev/null");
    if ( $result != 0 ) {
        print "Failed to attach $basedir/fstest to $dev\n";
        cleanup();
        exit -1;
    }
}

sub make_fs {
    my ($mk_type) = @_;

    get_loop_dev();

    if ( $mk_type eq "tmpfs" ) {
        return;
    }

    print "Create $basedir/fstest with dd\n";
    $result = system(
        "dd if=/dev/zero of=$basedir/fstest bs=1024 count=10240 2>/dev/null");
    if ( $result != 0 ) {
        print "dd failed to create fstest\n";
        exit -1;
    }

    attach_dev();

    print "Make $mk_type filesystem on $dev\n";
    $result = system("mkfs.$mk_type $dev >& /dev/null");
    if ( $result != 0 ) {
        system("losetup -d $dev 2>/dev/null");
        cleanup();
        print "mkfs.$mk_type failed to create filesystem on $dev\n";
        exit -1;
    }
}

sub mk_mntpoint_1 {
    system("rm -rf $private_path/mp1 2>/dev/null");
    system("mkdir -p $private_path/mp1 2>/dev/null");
}

sub mk_mntpoint_2 {
    system("rm -rf $private_path/mp2 2>/dev/null");
    system("mkdir -p $private_path/mp2 2>/dev/null");
}

sub cleanup {
    system("rm -rf $basedir/fstest 2>/dev/null");
    system("rm -rf $basedir/mntpoint 2>/dev/null");
}

sub cleanup1 {
    system("losetup -d $dev 2>/dev/null");
    system("rm -rf $basedir/fstest 2>/dev/null");
    system("rm -rf $basedir/mntpoint 2>/dev/null");
}

############### Test setfscreatecon(3) ##########################
print "Test setfscreatecon(3)\n";
$result = system
"runcon -t test_setfscreatecon_t $basedir/fs_relabel $v -n system_u:system_r:test_setfscreatecon_newcon_t:s0";
ok( $result eq 0 );

$result = system
"runcon -t test_no_setfscreatecon_t $basedir/fs_relabel $v -n system_u:system_r:test_setfscreatecon_newcon_t:s0 2>&1";
ok( $result >> 8 eq 13 );

############### Test Basic Mount/Unmount ##########################
cleanup();
mk_mntpoint_1();
make_fs($fs_type);
$mount_opts1 =
  "quota,usrquota,grpquota,defcontext=system_u:object_r:test_filesystem_t:s0";

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$mount_opts1\n";
$result = system(
"runcon -t test_filesystem_t $basedir/mount -s $dev -t $private_path/mp1 -f $fs_type -o $mount_opts1 $v"
);
ok( $result eq 0 );

print "Then remount\n";
$result = system(
"runcon -t test_filesystem_t $basedir/mount -r -s $dev -t $private_path/mp1 -f $fs_type -o $mount_opts1 $v"
);
ok( $result eq 0 );

print "Running quotacheck(8) to init user/group quota files\n";
$result = system("quotacheck -ugF vfsv0 $private_path/mp1");
ok( $result eq 0 );

print "Toggle User & Group quotas on/off\n";
$result = system(
"runcon -t test_filesystem_t $basedir/quotas_test -s $dev -t $private_path/mp1/aquota.user $v"
);
ok( $result eq 0 );
$result = system(
"runcon -t test_filesystem_t $basedir/quotas_test -s $dev -t $private_path/mp1/aquota.group $v"
);
ok( $result eq 0 );

print "Get statfs(2)\n";
$result =
  system(
    "runcon -t test_filesystem_t $basedir/statfs_test -t $basedir/mntpoint $v");
ok( $result eq 0 );

print "Creating test file $basedir/mntpoint/mp1/test_file\n";
$result =
  system(
"runcon -t test_filesystem_t $basedir/create_file_change_context -t test_filesystem_filecon_t -f $private_path/mp1/test_file $v"
  );
ok( $result eq 0 );

if ($test_watch) {
    print "fanotify(7) test\n";
    $result = system(
"runcon -t test_filesystem_t $basedir/fanotify_fs $v -t $basedir/mntpoint/mp1"
    );
    ok( $result eq 0 );
}

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result =
  system("runcon -t test_filesystem_t $basedir/umount -t $private_path/mp1 $v");
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Test Move Mount ##########################
make_fs($fs_type);
$mount_opts2 =
  "quota,usrquota,grpquota,rootcontext=system_u:object_r:test_filesystem_t:s0";
system("mkdir -p $private_path 2>/dev/null");

print "Set mount MS_BIND on filesystem\n";
$result = system(
"runcon -t test_filesystem_t $basedir/mount -s $private_path -t $private_path -b $v"
);
ok( $result eq 0 );

print "Set mount MS_PRIVATE on filesystem\n";
$result =
  system("runcon -t test_filesystem_t $basedir/mount -t $private_path -p $v");
ok( $result eq 0 );

mk_mntpoint_1();
mk_mntpoint_2();

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$mount_opts2\n";
$result = system(
"runcon -t test_filesystem_t $basedir/mount -s $dev -t $private_path/mp1 -f $fs_type -o $mount_opts2 $v"
);
ok( $result eq 0 );

print "Set mount MS_MOVE on filesystem\n";
$result = system(
"runcon -t test_filesystem_t $basedir/mount -s $private_path/mp1 -t $private_path/mp2 -m  $v"
);
ok( $result eq 0 );

print "Unmount filesystem from $basedir/mntpoint/mp2\n";
$result =
  system("runcon -t test_filesystem_t $basedir/umount -t $private_path/mp2 $v");
ok( $result eq 0 );

print "Unmount filesystem from $basedir/mntpoint\n";
$result =
  system("runcon -t test_filesystem_t $basedir/umount -t $private_path $v");
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { relabelfrom } ##########################
# hooks.c may_context_mount_sb_relabel() FILESYSTEM__RELABELFROM

$opts_no_relabelfrom =
"defcontext=system_u:object_r:test_filesystem_no_relabelfrom_t:s0,fscontext=system_u:object_r:test_filesystem_no_relabelfrom_t:s0";
mk_mntpoint_1();
make_fs($fs_type);

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_relabelfrom\n";
$result = system(
"runcon -t test_filesystem_no_relabelfrom_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_relabelfrom $v 2>&1"
);
ok( $result >> 8 eq 13 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { relabelto } ##########################
# hooks.c may_context_mount_sb_relabel() FILESYSTEM__RELABELTO

$opts_no_relabelto =
  "fscontext=system_u:object_r:test_filesystem_no_relabelto_t:s0";
mk_mntpoint_1();
make_fs($fs_type);

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_relabelto\n";
$result = system(
"runcon -t test_filesystem_no_relabelto_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_relabelto $v 2>&1"
);
ok( $result >> 8 eq 13 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { relabelfrom } ##########################
# hooks.c may_context_mount_inode_relabel() FILESYSTEM__RELABELFROM

$opts_no_relabelfrom =
  "rootcontext=system_u:object_r:test_filesystem_no_relabelfrom_t:s0";
mk_mntpoint_1();
make_fs($fs_type);

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_relabelfrom\n";
$result = system(
"runcon -t test_filesystem_no_relabelfrom_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_relabelfrom $v 2>&1"
);
ok( $result >> 8 eq 13 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { associate } ##########################
# hooks.c may_context_mount_inode_relabel() FILESYSTEM__ASSOCIATE

$opts_no_associate =
"defcontext=system_u:object_r:test_filesystem_no_associate_t:s0,fscontext=system_u:object_r:test_filesystem_no_associate_t:s0";
mk_mntpoint_1();
make_fs($fs_type);

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_associate\n";
$result = system(
"runcon -t test_filesystem_no_associate_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_associate $v 2>&1"
);
ok( $result >> 8 eq 13 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { associate } ##########################
# hooks.c may_create() FILESYSTEM__ASSOCIATE
cleanup();
mk_mntpoint_1();
make_fs($fs_type);
$opts_no_associate_file =
  "fscontext=system_u:object_r:test_filesystem_no_associate_file_t:s0";

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_associate_file\n";
$result = system(
"runcon -t test_filesystem_no_associate_file_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_associate_file $v"
);
ok( $result eq 0 );

print "Creating test file $basedir/mntpoint/mp1/test_file\n";
$result =
  system(
"runcon -t test_filesystem_no_associate_file_t $basedir/create_file_change_context -t unconfined_t -f $basedir/mntpoint/mp1/test_file $v 2>&1"
  );
ok( $result >> 8 eq 13 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result =
  system(
"runcon -t test_filesystem_no_associate_file_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
  );
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { quotamod } ##########################
# hooks.c selinux_quotactl() FILESYSTEM__QUOTAMOD

$opts_no_quotamod =
"quota,usrquota,grpquota,fscontext=system_u:object_r:test_filesystem_no_quotamod_t:s0";
mk_mntpoint_1();
make_fs($fs_type);
system("mkdir -p $private_path 2>/dev/null");

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_quotamod\n";
$result = system(
"runcon -t test_filesystem_no_quotamod_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_quotamod $v 2>&1"
);
ok( $result eq 0 );

# No need to run quotacheck(8) as never gets far enough to read quota file
print "Toggle User & Group quotas on/off\n";    # Must have full path
$result = system(
"runcon -t test_filesystem_no_quotamod_t $basedir/quotas_test -s $dev -t $private_path/mp1/aquota.user $v 2>&1"
);
ok( $result >> 8 eq 13 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result = system(
"runcon -t test_filesystem_no_quotamod_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
);
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { quotaget } ##########################
# hooks.c selinux_quotactl() FILESYSTEM__QUOTAGET

$opts_no_quotaget =
"quota,usrquota,grpquota,context=system_u:object_r:test_filesystem_no_quotaget_t:s0";
mk_mntpoint_1();
make_fs($fs_type);

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_quotaget\n";
$result = system(
"runcon -t test_filesystem_no_quotaget_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_quotaget $v"
);
ok( $result eq 0 );

print "Running quotacheck(8) to init user/group quota files\n";
$result = system("quotacheck -ugF vfsv0 $private_path/mp1");
ok( $result eq 0 );

print "Toggle User & Group quotas on/off\n";    # Must have full path
$result = system(
"runcon -t test_filesystem_no_quotaget_t $basedir/quotas_test -s $dev -t $private_path/mp1/aquota.user $v 2>&1"
);
ok( $result >> 8 eq 13 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result = system(
"runcon -t test_filesystem_no_quotaget_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
);
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { mount } ##########################
# hooks.c selinux_sb_kern_mount() FILESYSTEM__MOUNT

$opts_no_mount = "rootcontext=system_u:object_r:test_filesystem_no_mount_t:s0";
mk_mntpoint_1();
make_fs($fs_type);

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_mount\n";
$result = system(
"runcon -t test_filesystem_no_mount_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_mount $v 2>&1"
);
ok( $result >> 8 eq 13 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { getattr } ##########################
# hooks.c selinux_sb_statfs() FILESYSTEM__GETATTR

$opts_no_getattr =
  "rootcontext=system_u:object_r:test_filesystem_no_getattr_t:s0";
mk_mntpoint_1();
make_fs($fs_type);

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_getattr\n";
$result = system(
"runcon -t test_filesystem_no_getattr_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_getattr $v"
);
ok( $result eq 0 );

$result = system(
"runcon -t test_filesystem_no_getattr_t $basedir/statfs_test -t $basedir/mntpoint $v 2>&1"
);
ok( $result >> 8 eq 13 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result = system(
"runcon -t test_filesystem_no_getattr_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
);
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { remount } ##########################
# hooks.c selinux_mount() FILESYSTEM__REMOUNT

$opts_no_remount =
  "rootcontext=system_u:object_r:test_filesystem_no_remount_t:s0";
mk_mntpoint_1();
make_fs($fs_type);

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_remount\n";
$result = system(
"runcon -t test_filesystem_no_remount_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_remount $v"
);
ok( $result eq 0 );

print "Then remount\n";
$result = system(
"runcon -t test_filesystem_no_remount_t $basedir/mount -r -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_remount $v 2>&1"
);
ok( $result >> 8 eq 13 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result = system(
"runcon -t test_filesystem_no_remount_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
);
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { unmount } ##########################
# hooks.c selinux_umount() FILESYSTEM__UNMOUNT

$opts_no_unmount =
  "rootcontext=system_u:object_r:test_filesystem_no_unmount_t:s0";
mk_mntpoint_1();
make_fs($fs_type);

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_unmount\n";
$result = system(
"runcon -t test_filesystem_no_unmount_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_unmount $v"
);
ok( $result eq 0 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result = system(
"runcon -t test_filesystem_no_unmount_t $basedir/umount -t $basedir/mntpoint/mp1 $v 2>&1"
);
ok( $result >> 8 eq 13 );

# Make sure it does get unmounted
print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result =
  system(
    "runcon -t test_filesystem_t $basedir/umount -t $basedir/mntpoint/mp1 $v");
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { associate }  ##########################
# hooks.c selinux_inode_setxattr() FILESYSTEM__ASSOCIATE
cleanup();
mk_mntpoint_1();
make_fs($fs_type);
$opts_no_associate_file =
"defcontext=system_u:object_r:test_filesystem_no_associate_file_t:s0,fscontext=system_u:object_r:test_filesystem_no_associate_file_t:s0";

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$opts_no_associate_file\n";
$result = system(
"runcon -t test_filesystem_no_associate_file_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_associate_file $v"
);
ok( $result eq 0 );

print "Creating test file $basedir/mntpoint/mp1/test_file\n";
$result =
  system(
"runcon -t test_filesystem_no_associate_file_t $basedir/create_file_change_context -t unconfined_t -f $basedir/mntpoint/mp1/test_file $v 2>&1"
  );
ok( $result >> 8 eq 13 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result =
  system(
"runcon -t test_filesystem_no_associate_file_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
  );
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

############### Deny filesystem { watch }  ##########################
# hooks.c selinux_path_notify() FILESYSTEM__WATCH
if ($test_watch) {
    cleanup();
    mk_mntpoint_1();
    make_fs($fs_type);
    $opts_no_watch = "context=system_u:object_r:test_filesystem_no_watch_t:s0";

    print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
    print "Using mount options:\n\t$opts_no_watch\n";
    $result = system(
"runcon -t test_filesystem_no_watch_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $opts_no_watch $v"
    );
    ok( $result eq 0 );

    print "test_fanotify\n";
    $result = system(
"runcon -t test_filesystem_no_watch_t $basedir/fanotify_fs $v -t $basedir/mntpoint/mp1 2>&1"
    );
    ok( $result >> 8 eq 13 );

    print "Unmount filesystem from $basedir/mntpoint/mp1\n";
    $result = system(
"runcon -t test_filesystem_no_watch_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
    );
    ok( $result eq 0 );

    print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
    cleanup1();
}

##########################################################################
# context     - Useful when mounting filesystems that do not support extended
#               attributes.
#   Tested by - Creating a filesystem that has xattrs set to a different value,
#               then mount with context= and confirm that the files have that
#               context as well as any newly created files (even if fscreate
#               was set to something else), and that setfilecon/setxattr() on
#               files within the mount fails with errno EOPNOTSUPP.
##########################################################################
cleanup();
mk_mntpoint_1();
make_fs($fs_type);

# Mount with xttrs to create a file with specific context.
$context1_opts = "defcontext=system_u:object_r:test_filesystem_context_t:s0";

print "Testing 'context=' mount option\n";
print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$context1_opts\n";
$result = system(
"runcon -t test_filesystem_context_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $context1_opts $v"
);
ok( $result eq 0 );

# Create file with 'test_filesystem_filecon_t' context
print "Creating test file $basedir/mntpoint/mp1/test_file\n";
$result =
  system(
"runcon -t test_filesystem_context_t $basedir/create_file_change_context -t test_filesystem_filecon_t -f $private_path/mp1/test_file $v"
  );
ok( $result eq 0 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result = system(
"runcon -t test_filesystem_context_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
);
ok( $result eq 0 );

# Need to free the loop device, then get new dev one and attach
system("losetup -d $dev 2>/dev/null");
get_loop_dev();
attach_dev();

# Mount again with no xttr support
$context2_opts = "context=system_u:object_r:test_filesystem_context_t:s0";
print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$context2_opts\n";
$result = system(
"runcon -t test_filesystem_context_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $context2_opts $v"
);
ok( $result eq 0 );

# Now check the context on file is system_u:object_r:test_filesystem_context_t:s0
print "Check test file context $basedir/mntpoint/mp1/test_file\n";
$result =
  system(
"runcon -t test_filesystem_context_t $basedir/check_file_context -f $private_path/mp1/test_file -e system_u:object_r:test_filesystem_context_t:s0 $v"
  );
ok( $result eq 0 );

# Then create a file with 'test_filesystem_filecon_t' context, this should fail with EOPNOTSUPP
print "Creating test file $basedir/mntpoint/mp1/test_file\n";
$result =
  system(
"runcon -t test_filesystem_context_t $basedir/create_file_change_context -t test_filesystem_filecon_t -f $private_path/mp1/test_file $v 2>/dev/null"
  );
ok( $result >> 8 eq 95 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result =
  system(
"runcon -t test_filesystem_context_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
  );
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

##########################################################################
# rootcontext - Explicitly label the root inode of the filesystem being
#               mounted before that filesystem or inode becomes visible
#               to userspace.
#   Tested by - Set mountpoint to unlabeled_t and then check that the
#               context of the root directory matches rootcontext= after
#               the mount operation.
##########################################################################
cleanup();
mk_mntpoint_1();
make_fs($fs_type);
$root_opts = "rootcontext=system_u:object_r:test_filesystem_context_t:s0";

print "Testing 'rootcontext=' mount option\n";

# Reset mountpoint to 'unlabeled_t' so it is different to any other possible test values.
print "Resetting MP to unlabeled_t $basedir/mntpoint/mp1\n";
$result =
  system(
"runcon -t test_filesystem_context_t $basedir/check_mount_context -r -m $basedir/mntpoint/mp1 $v"
  );
ok( $result eq 0 );

print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$root_opts\n";
$result = system(
"runcon -t test_filesystem_context_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $root_opts $v"
);
ok( $result eq 0 );

# Now check the mountpoint is the 'rootcontext=' value
print "Check MP context $basedir/mntpoint/mp1\n";
$result =
  system(
"runcon -t test_filesystem_context_t $basedir/check_mount_context -m $basedir/mntpoint/mp1 -e system_u:object_r:test_filesystem_context_t:s0 $v"
  );
ok( $result eq 0 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result = system(
"runcon -t test_filesystem_context_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
);
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

##########################################################################
# defcontext  - Set default security context for unlabeled files.
#               This overrides the value set for unlabeled files in policy
#               and requires a filesystem that supports xattr labeling.
#   Tested by - Create filesystem that has files w/o xattrs and then confirm
#               that they are mapped to the specified defcontext upon mount,
#               where defcontext differs from the policy default.
##########################################################################
cleanup();
mk_mntpoint_1();
make_fs($fs_type);

$test_opts = "context=system_u:object_r:test_filesystem_context_t:s0";

print "Testing 'defcontext=' mount option\n";
print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$test_opts\n";
$result = system(
"runcon -t test_filesystem_context_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $test_opts $v"
);
ok( $result eq 0 );

# Create file, its context will be system_u:object_r:test_filesystem_context_t:s0 from $test_opts
print "Creating test file $basedir/mntpoint/mp1/test_file\n";
$result =
  system(
"runcon -u system_u -t test_filesystem_fscontext_t $basedir/create_file -f $basedir/mntpoint/mp1/test_file $v"
  );
ok( $result eq 0 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result = system(
"runcon -t test_filesystem_context_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
);
ok( $result eq 0 );

# Need to free the loop device, then get new dev one and attach
system("losetup -d $dev 2>/dev/null");
get_loop_dev();
attach_dev();

# Mount again with defcontext=
$defcontext_opts = "defcontext=system_u:object_r:test_filesystem_filecon_t:s0";
print "Mount $fs_type filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$defcontext_opts\n";
$result = system(
"runcon -t test_filesystem_context_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $defcontext_opts $v"
);
ok( $result eq 0 );

# Now check the file context is now system_u:object_r:test_filesystem_filecon_t:s0
print "Check test file context $basedir/mntpoint/mp1/test_file\n";
$result =
  system(
"runcon -t test_filesystem_context_t $basedir/check_file_context -f $basedir/mntpoint/mp1/test_file -e system_u:object_r:test_filesystem_filecon_t:s0 $v"
  );
ok( $result eq 0 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result =
  system(
"runcon -t test_filesystem_context_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
  );
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

##########################################################################
# fscontext   - Sets the overarching filesystem label to a specific security
#               context. This filesystem label is separate from the individual
#               labels on the files.
#   Tested by - Mount a tmpfs (fs_use_trans) filesystem with fscontext= and
#               then create a file within it, checking its context.
##########################################################################
$fs_type = "tmpfs";
cleanup();
mk_mntpoint_1();
make_fs($fs_type);
$fscontext_opts =
"fscontext=system_u:object_r:test_filesystem_fscontext_t:s0,size=10M,mode=0770";

print "Testing 'fscontext=' mount option\n";
print "Mount tmpfs filesystem on $basedir/mntpoint/mp1\n";
print "Using mount options:\n\t$fscontext_opts\n";
$result = system(
"runcon -t test_filesystem_fscontext_t $basedir/mount -s $dev -t $basedir/mntpoint/mp1 -f $fs_type -o $fscontext_opts $v"
);
ok( $result eq 0 );

print "Creating test file $basedir/mntpoint/mp1/test_file\n";
$result =
  system(
"runcon -t test_filesystem_fscontext_t $basedir/create_file_change_context -t test_filesystem_filecon_t -f $private_path/mp1/test_file $v"
  );
ok( $result eq 0 );

print "Unmount filesystem from $basedir/mntpoint/mp1\n";
$result =
  system(
"runcon -t test_filesystem_fscontext_t $basedir/umount -t $basedir/mntpoint/mp1 $v"
  );
ok( $result eq 0 );

print "Removing: $dev $basedir/mntpoint $basedir/fstest\n";
cleanup1();

# Cleanup any attached /dev/loop entries
foreach my $n (@device_list) {
    system("$basedir/grim_reaper $n 2>/dev/null");
}

exit;
