#!/usr/bin/perl

use Test;
BEGIN { plan tests => 68 }

$basedir = $0;
$basedir =~ s|(.*)/[^/]*|$1|;

# The test_sandbox.te policy sets the base policy permissions for these tests.
# We use sandbox policies to further restrict the base policy. Some sandbox
# policies attempt to grant themselves extra permissions so that we can test
# that those permissions are NOT actually granted. All sandbox tests check for
# permissions to read and search directories.
#
# The following tests are performed
#
#                       | base   | sandbox | expected result | expected result
#  type                 | policy | policy  | without sandbox | WITH sandbox
# ----------------------|------------------------------------------------------
#  test_sandbox_nodir_t | deny   | deny    | deny            | deny
#  test_sandbox_nodir_t | deny   | allow   | deny            | deny
#  test_sandbox_rxdir_t | allow  | deny    | allow           | deny
#  test_sandbox_rxdir_t | allow  | allow   | allow           | allow
#
# To test both loading and unloading of policies, each test occurs in the
# following sequence:
#  1. test read/search operations (without sandbox)
#  2. load sandbox
#  3. test read/search operations (WITH sandbox)
#  4. unload sandbox
#  5. test read/search operations (without sandbox)
#
# Finally, each test is performed twice. Once with sandboxes written in ALLOW
# mode and a second time with sandboxes written in DENY mode. The same results
# are expected in each mode.
#
# The sandbox policy files are named using the following scheme:
#  <type>_<perms>_<mode>.cil
# Where:
#  <type> is either 'nodir' or 'rxdir' -- indicates type sandbox is applied to
#  <perms> is either 'no' or 'rx' -- indicates permissions granted by sandbox
#  <mode> is either 'allow' or 'deny' -- indicates mode sandbox is written in
#

# setup test directory and file
system("rm -rf $basedir/test_dir");
system("mkdir $basedir/test_dir");
system("chcon -t test_sandbox_dir_t $basedir/test_dir");
system("touch $basedir/test_dir/test_file");

# compile sandboxes
$allow_mode = 0;
$deny_mode  = 1;
&compile( "test_sandbox_nodir_t", "nodir_no_allow.cil", $allow_mode );
&compile( "test_sandbox_nodir_t", "nodir_rx_allow.cil", $allow_mode );
&compile( "test_sandbox_rxdir_t", "rxdir_no_allow.cil", $allow_mode );
&compile( "test_sandbox_rxdir_t", "rxdir_rx_allow.cil", $allow_mode );
&compile( "test_sandbox_nodir_t", "nodir_no_deny.cil",  $deny_mode );
&compile( "test_sandbox_nodir_t", "nodir_rx_deny.cil",  $deny_mode );
&compile( "test_sandbox_rxdir_t", "rxdir_no_deny.cil",  $deny_mode );
&compile( "test_sandbox_rxdir_t", "rxdir_rx_deny.cil",  $deny_mode );

# For the compiled sandbox files to be readable by test_sandbox_op and
# test_sandbox_noop, we must change the files security contexts.
system("chcon -t test_sandbox_file_t $basedir/*.sandbox");

# confirm op/noop types can read .sandbox files
$result = system(
"runcon -t test_sandbox_op -- cat $basedir/rxdir_rx_allow.sandbox > /dev/null"
);
ok( $result, 0 );
$result = system(
"runcon -t test_sandbox_noop -- cat $basedir/rxdir_rx_allow.sandbox > /dev/null"
);
ok( $result, 0 );

# First, we want to make sure that types without the sandbox operate permission
# (specifically the test_sandbox_noop type) are denied from loading and
# unloading a sandbox policy.

$sandbox = "$basedir/rxdir_rx_allow.sandbox";
$result  = system(
    "runcon -t test_sandbox_noop -- sebox --load $sandbox > /dev/null 2>&1");
ok($result);
$result = system(
    "runcon -t test_sandbox_noop -- sebox --unload $sandbox > /dev/null 2>&1");
ok($result);

# ================================================================= #
#  deny, deny (ALLOW MODE)                                          #
# ================================================================= #
&test_rx( "test_sandbox_nodir_t", -1 );
&load_sandbox( "test_sandbox_op", "nodir_no_allow.sandbox" );
&test_rx( "test_sandbox_nodir_t", -1 );
&unload_sandbox( "test_sandbox_op", "nodir_no_allow.sandbox" );
&test_rx( "test_sandbox_nodir_t", -1 );

# ================================================================= #
#  deny, allow (ALLOW MODE)                                         #
# ================================================================= #
&test_rx( "test_sandbox_nodir_t", -1 );
&load_sandbox( "test_sandbox_op", "nodir_rx_allow.sandbox" );
&test_rx( "test_sandbox_nodir_t", -1 );
&unload_sandbox( "test_sandbox_op", "nodir_rx_allow.sandbox" );
&test_rx( "test_sandbox_nodir_t", -1 );

# ================================================================= #
#  allow, deny (ALLOW MODE)                                         #
# ================================================================= #
&test_rx( "test_sandbox_rxdir_t", 0 );
&load_sandbox( "test_sandbox_op", "rxdir_no_allow.sandbox" );
&test_rx( "test_sandbox_rxdir_t", -1 );
&unload_sandbox( "test_sandbox_op", "rxdir_no_allow.sandbox" );
&test_rx( "test_sandbox_rxdir_t", 0 );

# ================================================================= #
#  allow, allow (ALLOW MODE)                                        #
# ================================================================= #
&test_rx( "test_sandbox_rxdir_t", 0 );
&load_sandbox( "test_sandbox_op", "rxdir_rx_allow.sandbox" );
&test_rx( "test_sandbox_rxdir_t", 0 );
&unload_sandbox( "test_sandbox_op", "rxdir_rx_allow.sandbox" );
&test_rx( "test_sandbox_rxdir_t", 0 );

# ================================================================= #
#  deny, deny (DENY MODE)                                        #
# ================================================================= #
&test_rx( "test_sandbox_nodir_t", -1 );
&load_sandbox( "test_sandbox_op", "nodir_no_deny.sandbox" );
&test_rx( "test_sandbox_nodir_t", -1 );
&unload_sandbox( "test_sandbox_op", "nodir_no_deny.sandbox" );
&test_rx( "test_sandbox_nodir_t", -1 );

# ================================================================= #
#  deny, allow (DENY MODE)                                        #
# ================================================================= #
&test_rx( "test_sandbox_nodir_t", -1 );
&load_sandbox( "test_sandbox_op", "nodir_rx_deny.sandbox" );
&test_rx( "test_sandbox_nodir_t", -1 );
&unload_sandbox( "test_sandbox_op", "nodir_rx_deny.sandbox" );
&test_rx( "test_sandbox_nodir_t", -1 );

# ================================================================= #
#  allow, deny (DENY MODE)                                        #
# ================================================================= #
&test_rx( "test_sandbox_rxdir_t", 0 );
&load_sandbox( "test_sandbox_op", "rxdir_no_deny.sandbox" );
&test_rx( "test_sandbox_rxdir_t", -1 );
&unload_sandbox( "test_sandbox_op", "rxdir_no_deny.sandbox" );
&test_rx( "test_sandbox_rxdir_t", 0 );

# ================================================================= #
#  allow, allow (DENY MODE)                                        #
# ================================================================= #
&test_rx( "test_sandbox_rxdir_t", 0 );
&load_sandbox( "test_sandbox_op", "rxdir_rx_deny.sandbox" );
&test_rx( "test_sandbox_rxdir_t", 0 );
&unload_sandbox( "test_sandbox_op", "rxdir_rx_deny.sandbox" );
&test_rx( "test_sandbox_rxdir_t", 0 );

# clean up
system("rm -rf $basedir/test_dir");
system("rm $basedir/*.sandbox");

sub compile {
    $type     = shift;
    $filename = shift;
    $mode     = shift;

    $input  = "$basedir/$filename";
    $output = "$basedir/$filename";
    $output =~ s/\.cil/\.sandbox/ig;

    # generate context
    $context = `runcon -t $type -- id -Z`;
    chomp($context);

    # compile
    if ( $mode == 0 ) {
        system(
            "secilc --sandbox=\"$context\" --sandbox-allow -o $output $input");
    }
    else {
        system(
            "secilc --sandbox=\"$context\" --sandbox-deny -o $output $input");
    }
}

sub test_rx {
    $type     = shift;
    $expected = shift;

    $result = system("runcon -t $type -- ls $basedir/test_dir 2>&1");
    if ( $expected == 0 ) {
        ok( $result, 0 );
    }
    else {
        ok($result);
    }

    $result = system("runcon -t $type -- ls $basedir/test_dir/test_file 2>&1");
    if ( $expected == 0 ) {
        ok( $result, 0 );
    }
    else {
        ok($result);
    }
}

sub load_sandbox {
    $type     = shift;
    $filename = shift;

    $sandbox = "$basedir/$filename";
    $result =
      system("runcon -t $type -- sebox --load $sandbox > /dev/null 2>&1");
    ok( $result, 0 );
}

sub unload_sandbox {
    $type     = shift;
    $filename = shift;

    $sandbox = "$basedir/$filename";
    $result =
      system("runcon -t $type -- sebox --unload $sandbox > /dev/null 2>&1");
    ok( $result, 0 );
}
